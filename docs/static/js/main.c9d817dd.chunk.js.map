{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GifsGridItme.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","catg","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifsGridItme","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","setcategories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCC,UAAUH,GAF5C,8DAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVtB,kBAebM,GAfa,4CAAH,sDCERO,EAAe,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEtC,OACI,sBAAKc,UAAU,uDAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCAHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECGb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAXAC,qBAAU,WACNxB,EAASC,GACJwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAGGqB,EDjB2BK,CAAa1B,GAAjCa,EAHuB,EAG7BN,KAAca,EAHe,EAGfA,QAGtB,OACI,qCACI,oBAAIJ,UAAU,uCAAd,SAAsDhB,IAErDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAGZ,qBAAKA,UAAU,aAAf,SAEQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEMtBgB,EA1BM,WAAM,MAGazC,mBAAS,CAAC,mBAHvB,mBAGhB0C,EAHgB,KAGJC,EAHI,KAKvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAa5C,cAAe4C,IAC5B,uBACA,6BAEQD,EAAWnB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCbjC8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c9d817dd.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setinputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setinputValue(e.target.value)\n    }\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(catg => [inputValue, ...catg]);\n            setinputValue('');\n\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n\n            />\n        </form>\n\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifts = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=K0R42p1yt1HTKcAcjHhxF9iVYxFeZVl5`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n\n        }\n    })\n\n    return gifs;\n\n}\n","import React from 'react'\n\nexport const GifsGridItme = ({ id, title, url }) => {\n\n    return (\n        <div className='card animate__animated animate__fadeIn animate__slow' >\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","//https://animate.style/\n\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifsGridItme } from './GifsGridItme';\n\n\nexport const GifGrid = ({ category }) => {\n\n\n    const { data: images, loading } = useFetchGifs(category);\n\n\n    return (\n        <>\n            <h3 className='animate__animated animate__headShake'>{category}</h3>\n\n            {loading && <p className='animate__animated animate__flash'>Loading...</p>}\n\n\n            <div className='card-grid '>\n                {\n                    images.map((img) =>\n                        <GifsGridItme\n                            key={img.id}\n                            {...img} //Se puede utilizar para devolver todas las propiedades de un array de forma idependiente\n\n                        />\n                    )\n\n                }\n\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifts } from \"../components/helpers/getGifs\";\n\n/**\n * \n * @param category \n * \n * Se puede crear hooks personalizados.\n */\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifts(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            });\n    }, [category])\n\n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Bleach', 'Genshin Impact'];\n    const [categories, setcategories] = useState(['Genshin Impact']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setcategories} />\n            <hr />\n            <ol>\n                {\n                    categories.map((category) =>\n                        <GifGrid\n                            key={category}\n                            category={category}\n                        />\n                    )\n                }\n            </ol>\n        </>\n    );\n\n}\n\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n"],"sourceRoot":""}